server:
  port: 8080

spring:
  application:
    name: ffmpeg-drone-inspection

  # WebFlux配置
  codec:
    max-in-memory-size: 50MB
  webflux:
    multipart:
      max-in-memory-size: 50MB
      max-disk-usage-per-part: 100MB

  # R2DBC数据库配置
  r2dbc:
    url: r2dbc:mysql://localhost:3306/drone_detection
    username: root
    password: 123456
    pool:
      initial-size: 5
      max-size: 20
      max-idle-time: 30m
      validation-query: SELECT 1

  # Flyway数据库迁移配置
  flyway:
    url: jdbc:mysql://localhost:3306/drone_detection
    user: root
    password: password
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true

  # Jackson JSON配置
  jackson:
    default-property-inclusion: non_null
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false

  # 静态资源配置
  web:
    resources:
      static-locations: classpath:/static/
      cache:
        period: 3600

# 无人机巡检系统配置
drone:
  inspection:
    # 默认配置
    default-api-timeout: 120
    default-confidence-threshold: 0.3
    default-max-image-size: 1024

    # 视频处理配置
    video:
      default-tracker-type: "MIL"
      max-detection-calls: 4
      min-detection-interval: 90
      auto-dedup-enabled: true
      max-file-size: 500MB

    # 图像处理配置
    image:
      max-file-size: 50MB
      supported-formats: ["jpg", "jpeg", "png", "bmp"]

    # 文件存储配置
    storage:
      upload-dir: "uploads"
      output-dir: "outputs"
      temp-dir: "temp"
      auto-cleanup-days: 30

# 日志配置
logging:
  level:
    root: INFO
    com.example.ffmpeg: DEBUG
    com.example.ffmpeg.service.QwenApiService: DEBUG
    com.example.ffmpeg.service.DroneImageDetectionService: DEBUG
    com.example.ffmpeg.service.DroneVideoTrackingService: DEBUG
    com.example.ffmpeg.service.DatabaseService: DEBUG
    org.springframework.web: INFO
    org.springframework.data.r2dbc: DEBUG
    io.r2dbc.mysql: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
  file:
    name: logs/drone-detection.log
    max-size: 10MB
    max-history: 30

# 管理端点配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true

# 自定义配置
app:
  # API相关配置
  api:
    qwen:
      base-url: "https://dashscope.aliyuncs.com/api/v1/services/aigc/multimodal-generation/generation"
      default-model: "qwen2.5-vl-72b-instruct"
      timeout: 120s
      retry-attempts: 3

  # 安全配置
  security:
    api-key-header: "Authorization"
    enable-cors: true
    allowed-origins: "*"

  # 性能配置
  performance:
    enable-async-processing: true
    max-concurrent-detections: 5
    thread-pool-size: 10

---
# 开发环境配置
spring:
  config:
    activate:
      on-profile: dev
  r2dbc:
    url: r2dbc:mysql://localhost:3306/drone_detection_dev
  flyway:
    url: jdbc:mysql://localhost:3306/drone_detection_dev

logging:
  level:
    com.example.ffmpeg: DEBUG
    org.springframework.data.r2dbc: DEBUG

drone:
  inspection:
    storage:
      upload-dir: "dev-uploads"
      output-dir: "dev-outputs"

---
# 测试环境配置
spring:
  config:
    activate:
      on-profile: test
  r2dbc:
    url: r2dbc:h2:mem:///testdb;DB_CLOSE_DELAY=-1
  flyway:
    url: jdbc:h2:mem:testdb

logging:
  level:
    com.example.ffmpeg: INFO

---
# 生产环境配置
spring:
  config:
    activate:
      on-profile: prod
  r2dbc:
    url: r2dbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:drone_detection}
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:password}
  flyway:
    url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:drone_detection}
    user: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:password}

logging:
  level:
    root: WARN
    com.example.ffmpeg: INFO
  file:
    name: /var/log/drone-detection/application.log

drone:
  inspection:
    storage:
      upload-dir: "/data/uploads"
      output-dir: "/data/outputs"
      temp-dir: "/tmp/drone-detection"

app:
  security:
    allowed-origins: "${ALLOWED_ORIGINS:http://localhost:3000,https://yourdomain.com}"
